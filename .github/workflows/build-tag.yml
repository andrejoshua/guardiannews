# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build Android apk by tag

on:
  push:
    tags:
      - '*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build app
    runs-on: ubuntu-latest

    steps:
      # Checkout pull request branch
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup Java SDK
      - name: Setup Java SDK
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # Note: This workflow uses the latest stable version of the Flutter SDK.
      # No need to install Dart SDK separately.
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.10.2"
          channel: 'stable'
          cache: true

      # Version app based on tag
      # For the build number, will use the number of commits
      - name: Version the app based on tag
        run: |
          count=`git log --oneline | wc -l | xargs`
          new_version="version: ${{ github.ref_name }}+${count}"
          sed -i -r "/version:/s/.*/$new_version/" pubspec.yaml
          cat pubspec.yaml

      # Once Flutter is installed, run pub get to fetch the app's dependencies.
      # Since Lint check is already run on pull request, this yml should be focused on building app
      - name: Install dependencies
        run: flutter pub get

      # Sometimes we might forget to run build runner and skipped missing part files
      - name: Regenerate missing part files
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # Uncomment this step to verify the use of 'dart format' on each commit.
      - name: Verify formatting
        run: dart format --set-exit-if-changed --output=none .

      # Builds apk
      - name: Build apk
        run: flutter build apk --release --flavor prod

      # Upload apk to release
      - name: Upload apk
        uses: actions/upload-artifact@v1
        with:
          name: v${{ github.ref_name }}.apk
          path: build/app/outputs/apk/prod/release/v${{ github.ref_name }}.apk
          overwrite: true

      # This creates a new release that will be put under tag assets
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: v${{ github.ref_name }}
          draft: true
          prerelease: true

      # This will upload a release asset to the newly-created release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: build/app/outputs/apk/prod/release/v${{ github.ref_name }}.apk
          asset_name: v${{ github.ref_name }}.apk
          asset_content_type: application/zip
